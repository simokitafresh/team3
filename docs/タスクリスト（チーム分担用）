# 📋 SmartDrill タスクリスト（チーム分担用）

## 🚨 緊急：今日は水曜日！残り9日で完成させます

**現在の状況**
- 📅 今日：水曜日（Day 1）
- 🏁 発表：来週金曜日（残り9日）
- ⏰ 今日やること：環境準備＋役割決め（2時間）

## はじめに：このドキュメントの使い方

このドキュメントは、チーム全員で作業を分担するためのタスクリストです。
- 自分ができそうな作業を選んでください
- 分からないことがあったら、すぐに聞いてください
- 完璧を求めず、まずは「動くもの」を作りましょう

## 📝 デイリータスクマッピング

### Day 1（水・今日）：スタートダッシュ
- 19:00-19:30：環境セットアップ
- 19:30-20:00：役割分担決定
- 20:00-21:00：GitHubリポジトリ作成、Hello World

### Day 2-3（木金）：基礎構築
- 【P-1】Hello World完成 → プログラムチーム
- 【D-1】デザイン案作成 → 見た目チーム
- 【C-1】英単語リスト作成開始 → データチーム

### Day 4-5（土日）：コア機能実装 🔥
- 土曜午前：【P-2】写真アップロード機能
- 土曜午後：【C-1】テスト画像3種類完成
- 日曜午前：【P-3】問題表示機能
- 日曜午後：全体結合テスト

### Day 6-8（月火水）：仕上げ
- 【D-2】【D-3】画面デザイン適用
- 【T-1】動作テスト
- バグ修正

### Day 9（木）：プレゼン準備
- 【T-2】スライド完成
- 【T-3】リハーサル3回以上

### 5. 環境構築の具体的手順（プログラムチーム以外も一緒に）

#### Windowsの人
1. Pythonがあるか確認：コマンドプロンプトで `python --version`
2. なければPython公式サイトからダウンロード
3. `pip install flask` でFlaskをインストール

#### Macの人  
1. ターミナルで `python3 --version`
2. なければHomebrewでインストール
3. `pip3 install flask` でFlaskをインストール

#### 全員で確認
```python
# test.py を作って実行
from flask import Flask
app = Flask(__name__)

@app.route('/')
def hello():
    return 'SmartDrill チーム！'

if __name__ == '__main__':
    app.run(debug=True)
```

ブラウザで http://localhost:5000 を開いて表示されたら成功！

---

## 🎯 作業カテゴリーの説明

### 1. 🖥️ プログラム作成チーム
**何をする人？**
- アプリの「動く部分」を作る人
- ボタンを押したら何が起きるか、を作る人

**こんな人向け**
- プログラミングの授業を理解できている人
- エラーが出ても諦めない人
- 分からないことを調べるのが苦じゃない人

---

### 2. 🎨 見た目作成チーム  
**何をする人？**
- アプリの「見える部分」を作る人
- 使いやすく、きれいな画面を作る人

**こんな人向け**
- デザインやレイアウトに興味がある人
- 細かい調整が苦じゃない人
- スマホアプリをよく使っていて、使いやすさが分かる人

---

### 3. 📝 データ準備チーム
**何をする人？**
- テストで使う「問題と答え」を準備する人
- デモで見せる英単語テストを作る人

**こんな人向け**
- Excelが使える人（基本的な入力でOK）
- 正確に入力作業ができる人
- 英語がちょっと得意な人（中学レベルでOK）

---

### 4. 📱 テスト・発表チーム
**何をする人？**
- 作ったものがちゃんと動くか確認する人
- 発表の準備をする人

**こんな人向け**
- いろんなボタンを押して試すのが好きな人
- 人前で話すのが苦じゃない人
- PowerPointが使える人

---

## 📅 スケジュールと担当決め

### 🚨 重要：今日は水曜日！残り9日間で完成させます

### Week 1（水〜日）：基礎を作る5日間

| 曜日 | 日付 | やること | 担当チーム | 必要人数 | 時間の目安 |
|------|------|---------|-----------|----------|-----------|
| 水（今日！） | Day1 | 環境準備＋役割決め | 全員 | 3人 | 夜2時間 |
| 木 | Day2 | 基本の画面を作る | プログラム + 見た目 | 2人 | 2-3時間 |
| 金 | Day3 | 写真を撮る画面を作る | プログラム + 見た目 | 2人 | 2-3時間 |
| 土 | Day4 | 問題データ作成＋写真撮影機能 | 全員 | 3人 | 4時間 |
| 日 | Day5 | つなげて動かしてみる | 全員 | 3人 | 4時間 |

### Week 2（月〜木）：完成させる4日間 ＋ 金曜発表

| 曜日 | 日付 | やること | 担当チーム | 必要人数 | 時間の目安 |
|------|------|---------|-----------|----------|-----------|
| 月 | Day6 | 問題を出す機能＋正誤判定 | プログラム | 1-2人 | 3時間 |
| 火 | Day7 | デザイン仕上げ＋スマホ対応 | 見た目 + テスト | 2人 | 3時間 |
| 水 | Day8 | 全体テスト＋バグ修正 | 全員 | 3人 | 3時間 |
| 木 | Day9 | プレゼン準備＋リハーサル | テスト・発表 | 全員 | 4時間 |
| **金** | **発表** | **本番！** | 発表担当 | 1-2人 | - |

---

## 🔧 具体的なタスク一覧

### 🖥️ プログラム作成チームのタスク

#### 【P-1】最初の準備（難しさ：🔴高）
**何をする？**
- Flaskというツールを使えるようにする
- 最初の「Hello World」を表示する

**具体的な作業**
1. Pythonがパソコンに入っているか確認
2. Flaskをインストール（pip install flask）
3. app.pyというファイルを作る
4. ブラウザで「Hello World」が見えるようにする

**完成の基準**
- http://localhost:5000 を開いたら何か表示される

---

#### 【P-2】写真アップロード機能（難しさ：🔴高）
**何をする？**
- スマホで撮った写真をアプリに送る機能を作る

**具体的な作業**
1. 写真を選ぶボタンを作る
2. 選んだ写真をサーバーに送る
3. 送られた写真を保存する
4. 「アップロード成功」と表示する

**必要な知識**
- HTMLのformタグ
- Flaskでファイルを受け取る方法

---

#### 【P-3】問題を出す機能（難しさ：🟡中）
**何をする？**
- 問題を1つずつ表示する
- 答えを入力したら正解/不正解を判定する

**具体的な作業**
1. 問題データを読み込む
2. 1問ずつ表示する
3. 答えを入力する欄を作る
4. 正解なら「○」、不正解なら「×」を表示

---

### 🎨 見た目作成チームのタスク

#### 【D-1】基本デザイン作成（難しさ：🟢低）
**何をする？**
- アプリ全体の色やレイアウトを決める

**具体的な作業**
1. 色を3色決める（メイン、サブ、アクセント）
2. ボタンの形を決める（角丸？四角？）
3. 文字の大きさを決める
4. スマホで見やすいか確認する

**使うツール**
- 紙とペンでOK（最初はスケッチから）
- Figmaなど（使える人は）

---

#### 【D-2】撮影画面のデザイン（難しさ：🟡中）
**何をする？**
- 写真を撮る画面を使いやすくする

**具体的な作業**
1. 大きな「撮影」ボタンを作る
2. 撮った写真のプレビューを表示する場所を作る
3. 「この写真でOK」「撮り直す」ボタンを配置
4. スマホで押しやすいサイズにする

**参考**
- LINEの写真送信画面
- インスタグラムの投稿画面

---

#### 【D-3】学習画面のデザイン（難しさ：🟢低）
**何をする？**
- 問題を解く画面を見やすくする

**具体的な作業**
1. 問題文を大きく表示
2. 答えを入力する欄を分かりやすく
3. 「次の問題」ボタンを押しやすい場所に
4. 正解/不正解をはっきり表示

---

### 📝 データ準備チームのタスク

#### 【C-1】英単語テスト画像の作成（難しさ：🟢低）
**何をする？**
- デモで使う英単語テストを作る

**具体的な作業**
1. WordやGoogleドキュメントで英単語リストを作る
2. 見やすいフォント（MSゴシック等）で印刷
3. 3パターン作る（各20単語）
4. きれいに写真が撮れるか確認

**単語の例**
```
1. apple     りんご
2. book      本
3. cat       猫
4. desk      机
5. elephant  象
```

---

#### 【C-2】問題データファイルの作成（難しさ：🟢低）
**何をする？**
- プログラムが読み込む問題データを作る

**具体的な作業**
1. Excelで問題と答えの表を作る
2. CSVファイルとして保存する
3. 文字化けしないか確認
4. 合計60問（3セット×20問）作る

**Excelの形式**
| 問題 | 答え |
|------|------|
| apple | りんご |
| book | 本 |
| cat | 猫 |

---

#### 【C-3】テストシナリオ作成（難しさ：🟡中）
**何をする？**
- デモで見せる流れを決める

**具体的な作業**
1. どの単語テストを使うか決める
2. どの問題を解いて見せるか決める
3. わざと間違える問題も決める
4. 全体で3分のシナリオを作る

---

### 📱 テスト・発表チームのタスク

#### 【T-1】動作テスト（難しさ：🟢低）
**何をする？**
- いろんなパターンで動くか確認する

**具体的な作業**
1. スマホ（iPhone/Android）で試す
2. パソコンでも試す
3. おかしな動きを見つけたらメモする
4. 「ここが使いにくい」と思ったら提案する

**テスト項目の例**
- [ ] 写真は撮れる？
- [ ] 問題は表示される？
- [ ] 答えを入力できる？
- [ ] 正解/不正解は出る？

---

#### 【T-2】プレゼン資料作成（難しさ：🟡中）
**何をする？**
- 発表用のスライドを作る

**具体的な作業**
1. タイトルスライド
2. 「なぜ作ったか」スライド
3. デモの流れスライド
4. 技術的な工夫スライド
5. 今後の展望スライド

**1スライド1メッセージ**
- 文字は少なく
- 図や写真を使う
- デモ画面のスクショを入れる

---

#### 【T-3】発表練習（難しさ：🟢低）
**何をする？**
- 本番と同じように練習する

**具体的な作業**
1. 時間を計りながら話す（5分以内）
2. デモがスムーズにできるか確認
3. 質問されそうなことを考えておく
4. チームメンバーの前で練習

---

## ✅ 今日（水曜日）すぐやること！

### 1. 役割分担（30分で決める）
```
プログラム作成チーム：＿＿＿＿＿さん
見た目作成チーム：＿＿＿＿＿さん  
データ準備チーム：＿＿＿＿＿さん
テスト・発表チーム：＿＿＿＿＿さん
```
※ 1人が複数チームでもOK
※ 得意不得意より「やってみたい」を優先

### 2. 今日中に終わらせること
- [ ] 全員のPCでPythonが動くか確認
- [ ] GitHubのアカウント作成
- [ ] Slackグループに参加
- [ ] 役割分担を決める
- [ ] 明日の集合時間を決める

### 3. 今週末（土日）の予定確認
- 土曜日：何時から何時まで作業できる？
- 日曜日：何時から何時まで作業できる？
- オンラインでもOK

### 4. 連絡ルール
- **定期報告**：毎日夜9時にSlackで進捗報告
- **緊急相談**：詰まったら30分で相談
- **レスポンス**：Slackは12時間以内に返信

---

## 💡 9日間を乗り切るコツ

### 時間がないからこそ大切なこと

#### 1. 毎日の小さなゴール
- 「今日はここまで」を明確に
- できなくても次の日にリカバリー
- 小さくても進捗をSlackで共有

#### 2. 土日の使い方が勝負
- 土日で全体の50%を完成させる
- 土曜：朝から集まれる人は集まる
- 日曜：必ず全員で動作確認

#### 3. こだわりを捨てる勇気
- 「写真→問題」が動けば成功
- きれいなコードより動くコード
- 完璧な10個より動く3個

### やってはいけないこと ❌
- 黙って1人で悩む（30分ルール厳守）
- 「明日でいいや」と先延ばし
- 新しい機能を追加したくなる誘惑

### 緊急時の判断基準
- 困ったら「シンプルな方」を選ぶ
- 迷ったら「確実に動く方」を選ぶ
- 時間がなければ「デモに必要な部分」だけ

### 最後の切り札
もし木曜日の時点で動かなかったら：
1. 写真アップロードは画面だけ作る
2. 事前に用意した問題を表示
3. それでも「作ろうとしたもの」は伝わる

### 助け合いの例
- 「HTMLの書き方が分からない」→ プログラムチームが教える
- 「色のセンスがない」→ 見た目チームが提案
- 「英単語が思いつかない」→ みんなでアイデア出し
- 「Gitの使い方が...」→ できる人が画面共有で教える

## 📞 困ったときの相談先

1. **チームメンバー**（Slack）- 一番早い
2. **講師/メンター**（質問タイム）
3. **Google検索**（「Flask 写真アップロード 簡単」など）
4. **ChatGPT**（コードの書き方を聞く）
5. **YouTube**（環境構築の動画など）

---

最後に：**9日間、全力で走り抜けよう。完璧じゃなくていい。みんなで作ったことが一番の成果。**
